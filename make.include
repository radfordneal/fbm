# COMMANDS THAT ARE INCLUDED IN ALL MAKEFILES.  
#
# You may wish to modify this file to fit your local installation and
# preferences.  Commands for compilation of a version using the CPU
# only come first, followed by commands for compilation for a version
# using a GPU.


# COMMANDS FOR CPU VERSION.  The USE_SIMD_INTRINSICS and USE_FMA
# options will be ignored if the -march specification is not for an
# architecture that has the corresponding instructions. The USE_SLEEF
# option enables use of the SLEEF inline vectorized math functions for
# some CPU operations, which will use SIMD and FMA instructions if
# available given -march.

CC = gcc               # C compiler to use

# Setup for optional use of address sanitizer for testing.  Best used with
# an environment setting ASAN_OPTIONS=detect_leaks=0 since there are some
# innocuous leaks of small amounts of memory.

SANITIZE_OPTS = -fsanitize=address -fsanitize=bounds-strict \
                -static-libasan -fno-omit-frame-pointer

SANITIZE = # $(SANITIZE_OPTS)  # Remove '#' to enable


# Options when compiling .c files

CFLAGS = -g -O3 $(SANITIZE) -march=native -mtune=native \
         -Wno-logical-op-parentheses -Wno-absolute-value -Wno-unused-result \
         -DUSE_SIMD_INTRINSICS -DUSE_FMA \
         -DUSE_SLEEF -ffp-contract=off   # USE_SLEEF requires -ffp-contract=off


# Options when linking .o files

LFLAGS = $(SANITIZE)


# COMMANDS FOR GPU VERSION.  Uses the NVIDIA CUDA compiler for GPU
# code. The code is tested with CUDA 11.8 and CUDA 12.2, but may work
# with other versions as well.  Several versions of the commands are
# given below; all but one should be commented out.  A version
# tailored to your specific environment might be desirable.

# Note that various combinations of Linux version, CUDA version,
# NVIDIA driver version, and gcc version may produce problems.


# Settings that should work for CUDA 11.4 up to 11.8, for GPUs of
# compute capability 3.5 and later, relying on JIT compilation by the
# NVIDIA driver.  With JIT, there will be some delay the first time a
# program is run, but compilation is faster.  The -DUSE_SLEEF_CUDA
# option may be commented out, since it may not be faster.
#
# Also explicit code for compute capability 3.5 (most Kepler GPUs) is
# created, as necessary if a driver supporting Kepler GPUs is used with
# a CUDA version that isn't compatible with that driver.	
#
# THIS VERSION WON'T WORK IF YOU ARE USING CUDA 12.0 OR LATER.

NVCC_OPTIONS = -g -O3 -Xcompiler -march=native -Xcompiler -mtune=native \
         --Wno-deprecated-gpu-targets \
         --generate-code=arch=compute_35,code=compute_35 \
         --generate-code=arch=compute_35,code=sm_35 \
         --ptxas-options=-v \
         -ccbin=g++ \
         -DUSE_SIMD_INTRINSICS -DUSE_FMA \
         -DUSE_SLEEF -Xcompiler -ffp-contract=off # -DUSE_SLEEF_CUDA


# Settings that should work with CUDA 11.5 to at least 12.2, compiling
# for all non-deprecated architectures, plus a virtual architecture
# that will work for later architectures.  The -DUSE_SLEEF_CUDA option
# may be commented out, since it may not be faster. 

# NVCC_OPTIONS = -g -O3 -Xcompiler -march=native -Xcompiler -mtune=native \
#          --threads=0 --gpu-architecture=all \
#          --ptxas-options=-v \
#          -ccbin=g++ \
#          -DUSE_SIMD_INTRINSICS -DUSE_FMA \
#          -DUSE_SLEEF -Xcompiler -ffp-contract=off # -DUSE_SLEEF_CUDA
